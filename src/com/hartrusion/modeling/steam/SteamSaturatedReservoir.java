/*
 * The MIT License
 *
 * Copyright 2025 Viktor Alexander Hartung.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.hartrusion.modeling.steam;

import com.hartrusion.modeling.PhysicalDomain;
import com.hartrusion.modeling.exceptions.ModelErrorException;
import com.hartrusion.modeling.general.GeneralNode;
import com.hartrusion.modeling.general.SelfCapacitance;

/**
 * Implements a reservoir partially filled with water and with steam. It does
 * not consider compression effects, pressure is always only generated by the
 * steam saturation temperature. It has to be defined wether a flow through a
 * node happens in steam or in liquid phase, like with a steam separator. Said
 * so, this can be used to implement a steam separator.
 *
 * <p>
 * The element has an additional ambientPressure which will prevent evaporation
 * below that pressure. If the temperature is lower than this ambient pressure,
 * the contents of the reservoir have to be seen as water only.
 *
 * <p>
 * For the purpose of being able to make calculateable, stable model, there is a
 * convention here that the fluid temperature inside this reservoir is linear to
 * the specific enthalpy. Adding or removing enthalpy with a mass flow will
 * still be a valid mass and energy balance but the temperature of the mixture
 * is calculated by using this linear approach. Therefore, when initializing, a
 * high and a low temperature has to be provided to calculate linear
 * coefficients. The mixture temperature is then used to determine the steam
 * pressure inside the vessel, if a certain set ambient pressure is exceeded.
 * This allows not using the specific volume for calculations.
 *
 * @author Viktor Alexander Hartung
 */
public class SteamSaturatedReservoir
        extends SelfCapacitance
        implements SteamElement {

    private final SteamSaturatedSeparationHandler steamHandler;

    SteamTable propertyTable;

    public SteamSaturatedReservoir(SteamTable propertyTable) {
        super(PhysicalDomain.STEAM);
        steamHandler = new SteamSaturatedSeparationHandler(this, propertyTable);
        this.propertyTable = propertyTable;
    }

    public void setInitialState(double initialTtemperature, double storedMass,
            double lowTemperature, double highTemperature) {
        stateValue = Math.max(101417.97792131014,
                propertyTable.get("pSat_T", initialTtemperature));
        steamHandler.initState(initialTtemperature, storedMass,
                lowTemperature, highTemperature, stateValue);
    }

    @Override
    public void prepareCalculation() {
        if (deltaCalculated) {
            // The thing is that we do not have a connection between flow and
            // effort variables by the integral, instead, pressure gets set 
            // by the steam properties.
            deltaCalculated = false;
        }
        // the super call in EnergyStorage will set nextStateValue as
        // nextStateValue and reset the
        // stateValuePrepared and deltaCalculated variables.
        super.prepareCalculation();
        steamHandler.prepareSteamCalculation();
    }

    @Override
    public boolean doCalculation() {
        boolean didSomething, allFlowsUpdated;
        double flowSum;
        SteamNode sn;

        didSomething = setEffortValueOnNodes(stateValue);
        // As we overwrite the method without calling super and also using the
        // stateValue differently, we need to re-write large parts of what
        // the selfcapacitance is doing.
        if (!deltaCalculated) {
            flowSum = 0.0;
            allFlowsUpdated = true;
            for (GeneralNode n : nodes) {
                allFlowsUpdated = allFlowsUpdated && n.flowUpdated(this);
                if (n.flowUpdated(this)) {
                    flowSum = flowSum + n.getFlow(this);
                }
            }
            if (allFlowsUpdated) {
                delta = flowSum * stepTime; // delta is the flowed amount
                // Mass is no longer the state variable but gets stored in
                // the handler.
                steamHandler.setNextTotalMass(
                        steamHandler.getTotalMass() + delta);
                deltaCalculated = true;
                didSomething = true;
            }
        }

        // Add call for steamHandler calculation
        didSomething = steamHandler.doSteamCalculation() || didSomething;

        // We will get the next stateValue, which is the pressure, from the
        // steamHandler as its defined by the enthalpy of the saturated steam.
        if (steamHandler.isSteamCalulationFinished() && !stateValuePrepared) {
            // get the next pressure from the handler as this thing also has
            // the temperature:
            nextStateValue = steamHandler.getNextPressure();
            stateValuePrepared = true;
            didSomething = true;
        }

        for (GeneralNode n : nodes) {
            sn = (SteamNode) n;
            didSomething = sn.doCalculateSteamProperties() || didSomething;
        }

        return didSomething;
    }

    @Override
    public void setEffort(double effort, SteamNode source) {
        throw new ModelErrorException(
                "Force effort value on self capacitance is illegal.");
    }

    @Override
    public void setFlow(double flow, SteamNode source) {
        // Nothing will happen here
    }

    @Override
    public SteamHandler getSteamHandler() {
        return steamHandler;
    }

    @Override
    public SteamTable getSteamTable() {
        return propertyTable;
    }

    @Override
    public SteamNode getSteamNode(int idx) {
        return ((SteamNode) nodes.get(idx));
    }

    @Override
    public void registerNode(GeneralNode p) {
        super.registerNode(p);
        steamHandler.registerSteamPort((SteamNode) p, true);
    }

    public void registerNode(GeneralNode p, boolean isLiquid) {
        super.registerNode(p);
        steamHandler.registerSteamPort((SteamNode) p, isLiquid);
    }

    @Override
    public void setStepTime(double dt) {
        steamHandler.setStepTime(dt);
    }

    /**
     * Pseudo-Temperature which is used by the heat handler to model the physics
     * of this element.
     *
     * @return Temperature in Kelvin
     */
    public double getTemperature() {
        return steamHandler.getTemperature();
    }

}
